name: Windows Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_call:
    inputs:
      is_release:
        description: 'Whether this is a release build'
        required: false
        type: boolean
        default: false
      tag_name:
        description: 'Release tag name'
        required: false
        type: string

jobs:
  build-windows:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        arch: [x64, x86]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Install MinGW and dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          mingw-w64 \
          cmake \
          ninja-build \
          wget \
          unzip
          
    - name: Setup MinGW toolchain
      run: |
        if [ "${{ matrix.arch }}" = "x64" ]; then
          echo "CC=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
          echo "CXX=x86_64-w64-mingw32-g++" >> $GITHUB_ENV
          echo "CMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/cmake/mingw-w64-x86_64.cmake" >> $GITHUB_ENV
        else
          echo "CC=i686-w64-mingw32-gcc" >> $GITHUB_ENV
          echo "CXX=i686-w64-mingw32-g++" >> $GITHUB_ENV
          echo "CMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/cmake/mingw-w64-i686.cmake" >> $GITHUB_ENV
        fi
        
    - name: Create toolchain files
      run: |
        mkdir -p cmake
        
        # x64 toolchain
        cat > cmake/mingw-w64-x86_64.cmake << 'EOF'
        set(CMAKE_SYSTEM_NAME Windows)
        set(CMAKE_SYSTEM_PROCESSOR x86_64)
        
        set(CMAKE_C_COMPILER x86_64-w64-mingw32-gcc)
        set(CMAKE_CXX_COMPILER x86_64-w64-mingw32-g++)
        set(CMAKE_RC_COMPILER x86_64-w64-mingw32-windres)
        
        set(CMAKE_FIND_ROOT_PATH /usr/x86_64-w64-mingw32)
        set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
        set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
        set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
        EOF
        
        # x86 toolchain
        cat > cmake/mingw-w64-i686.cmake << 'EOF'
        set(CMAKE_SYSTEM_NAME Windows)
        set(CMAKE_SYSTEM_PROCESSOR i686)
        
        set(CMAKE_C_COMPILER i686-w64-mingw32-gcc)
        set(CMAKE_CXX_COMPILER i686-w64-mingw32-g++)
        set(CMAKE_RC_COMPILER i686-w64-mingw32-windres)
        
        set(CMAKE_FIND_ROOT_PATH /usr/i686-w64-mingw32)
        set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
        set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
        set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
        EOF
        
    - name: Build SDL3 for Windows
      run: |
        wget https://github.com/libsdl-org/SDL/archive/refs/tags/release-3.2.16.tar.gz
        tar -xzf release-3.2.16.tar.gz
        cd SDL-release-3.2.16
        mkdir build && cd build
        cmake .. \
          -DCMAKE_TOOLCHAIN_FILE=${{ env.CMAKE_TOOLCHAIN_FILE }} \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/SDL3-install \
          -DSDL_SHARED=ON \
          -DSDL_STATIC=OFF \
          -GNinja
        ninja
        ninja install
        
    - name: Configure CMake
      run: |
        cmake -B build -S . \
          -DCMAKE_TOOLCHAIN_FILE=${{ env.CMAKE_TOOLCHAIN_FILE }} \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH=${{ github.workspace }}/SDL3-install \
          -GNinja
          
    - name: Build
      run: ninja -C build
      
    - name: Test
      run: |
        echo "Cross-compiled binaries cannot be tested on Linux host"
      
    - name: Package
      run: |
        mkdir -p package/xbox-controller-api
        
        # Copy main executable
        cp build/*.exe package/xbox-controller-api/ || true
        
        # Copy SDL3 DLLs
        cp ${{ github.workspace }}/SDL3-install/bin/*.dll package/xbox-controller-api/ || true
        
        # Copy MinGW runtime DLLs with better error handling
        if [ "${{ matrix.arch }}" = "x64" ]; then
          # Essential MinGW x64 runtime DLLs
          find /usr/x86_64-w64-mingw32/lib -name "libwinpthread-1.dll" -exec cp {} package/xbox-controller-api/ \; || echo "libwinpthread-1.dll not found"
          find /usr/lib/gcc/x86_64-w64-mingw32 -name "libgcc_s_seh-1.dll" -exec cp {} package/xbox-controller-api/ \; || echo "libgcc_s_seh-1.dll not found"
          find /usr/lib/gcc/x86_64-w64-mingw32 -name "libstdc++-6.dll" -exec cp {} package/xbox-controller-api/ \; || echo "libstdc++-6.dll not found"
          
          # Additional potential dependencies
          find /usr/x86_64-w64-mingw32/lib -name "libssp-0.dll" -exec cp {} package/xbox-controller-api/ \; || echo "libssp-0.dll not found"
          find /usr/lib/gcc/x86_64-w64-mingw32 -name "libquadmath-0.dll" -exec cp {} package/xbox-controller-api/ \; || echo "libquadmath-0.dll not found"
        else
          # Essential MinGW x86 runtime DLLs
          find /usr/i686-w64-mingw32/lib -name "libwinpthread-1.dll" -exec cp {} package/xbox-controller-api/ \; || echo "libwinpthread-1.dll not found"
          find /usr/lib/gcc/i686-w64-mingw32 -name "libgcc_s_dw2-1.dll" -exec cp {} package/xbox-controller-api/ \; || echo "libgcc_s_dw2-1.dll not found"
          find /usr/lib/gcc/i686-w64-mingw32 -name "libstdc++-6.dll" -exec cp {} package/xbox-controller-api/ \; || echo "libstdc++-6.dll not found"
          
          # Additional potential dependencies
          find /usr/i686-w64-mingw32/lib -name "libssp-0.dll" -exec cp {} package/xbox-controller-api/ \; || echo "libssp-0.dll not found"
          find /usr/lib/gcc/i686-w64-mingw32 -name "libquadmath-0.dll" -exec cp {} package/xbox-controller-api/ \; || echo "libquadmath-0.dll not found"
        fi
        
        # Create a README with setup instructions
        cat > package/xbox-controller-api/README.txt << 'EOF'
        Xbox Controller Desktop Bridge

        REQUIREMENTS:
        - Windows 10 or later
        - Xbox controller (wired or wireless)
        - Visual C++ Redistributable (if issues occur)

        SETUP:
        1. Connect your Xbox controller
        2. Run xbox_controller_api.exe
        3. Follow the on-screen instructions

        TROUBLESHOOTING:
        - If the program crashes, install Visual C++ Redistributable
        - Make sure all DLL files are in the same folder as the executable
        - Check Windows Event Viewer for detailed error messages

        CONTROLS:
        - Left stick: Mouse movement
        - Right stick: Scroll wheel
        - A button: Left mouse click
        - B button: Right mouse click
        - X button: Play/Pause media
        - Y button: Voice input (Win+H)
        - Start button: Exit program
        EOF
        
        # List all files for debugging
        echo "Package contents:"
        ls -la package/xbox-controller-api/
        
        # Create zip
        cd package
        zip -r ../xbox-controller-api-windows-${{ matrix.arch }}.zip xbox-controller-api
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: xbox-controller-api-windows-${{ matrix.arch }}
        path: xbox-controller-api-windows-${{ matrix.arch }}.zip
        
    - name: Upload to release
      if: inputs.is_release == true
      run: |
        gh release upload ${{ inputs.tag_name }} xbox-controller-api-windows-${{ matrix.arch }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}